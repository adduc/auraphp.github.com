<?xml version="1.0"?>
<project version="0.17.2" title="">
  <file path="Aura/Sql/Adapter/AbstractAdapter.php" hash="2375977768afcb7c4b1fddec80467c68" package="Default">
    <parse_markers>
      <notice line="120">Name of argument $profiler does not match with function Docblock</notice>
      <notice line="121">Name of argument $column_factory does not match with function Docblock</notice>
      <notice line="122">Name of argument $dsn does not match with function Docblock</notice>
      <notice line="123">Name of argument $username does not match with function Docblock</notice>
      <notice line="124">Argument $password is missing from the function Docblock</notice>
      <notice line="125">Argument $options is missing from the function Docblock</notice>
    </parse_markers>
    <namespace-alias name="ProfilerInterface">Aura\Sql\ProfilerInterface</namespace-alias>
    <namespace-alias name="ColumnFactory">Aura\Sql\ColumnFactory</namespace-alias>
    <namespace-alias name="PDO">PDO</namespace-alias>
    <namespace-alias name="PDOStatement">PDOStatement</namespace-alias>
    <class final="false" abstract="true" line="22" namespace="Aura\Sql\Adapter" package="Aura\Sql">
      <name>AbstractAdapter</name>
      <extends/>
      <full_name>\Aura\Sql\Adapter\AbstractAdapter</full_name>
      <docblock>
        <description>Abstract class for SQL drivers.</description>
        <long-description/>
        <tag line="15" name="package" description="Aura.Sql"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="31" package="Default">
        <name>$column_factory</name>
        <default/>
        <docblock>
          <description>A ColumnFactory for returning column information.</description>
          <long-description/>
          <tag line="24" name="var" description="" type="\Aura\Sql\ColumnFactory">
            <type by_reference="false">\Aura\Sql\ColumnFactory</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="41" package="Default">
        <name>$dsn</name>
        <default/>
        <docblock>
          <description>The PDO DSN for the connection. This can be an array of key-value pairs
or a string (minus the PDO type prefix).</description>
          <long-description/>
          <tag line="33" name="var" description="" type="string|array">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="50" package="Default">
        <name>$dsn_prefix</name>
        <default/>
        <docblock>
          <description>The PDO type prefix.</description>
          <long-description/>
          <tag line="43" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="59" package="Default">
        <name>$options</name>
        <default>[]</default>
        <docblock>
          <description>PDO options for the connection.</description>
          <long-description/>
          <tag line="52" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="68" package="Default">
        <name>$password</name>
        <default/>
        <docblock>
          <description>The password for the connection.</description>
          <long-description/>
          <tag line="61" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="77" package="Default">
        <name>$pdo</name>
        <default/>
        <docblock>
          <description>The PDO connection object.</description>
          <long-description/>
          <tag line="70" name="var" description="" type="\PDO">
            <type by_reference="false">\PDO</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="86" package="Default">
        <name>$quote_name_prefix</name>
        <default/>
        <docblock>
          <description>The prefix to use when quoting identifier names.</description>
          <long-description/>
          <tag line="79" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="95" package="Default">
        <name>$quote_name_suffix</name>
        <default/>
        <docblock>
          <description>The suffix to use when quoting identifier names.</description>
          <long-description/>
          <tag line="88" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="104" package="Default">
        <name>$username</name>
        <default/>
        <docblock>
          <description>The username for the connection.</description>
          <long-description/>
          <tag line="97" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" line="119" package="Default">
        <name>__construct</name>
        <docblock>
          <description>Constructor.</description>
          <long-description/>
          <tag line="106" name="param" description="DSN parameters for the PDO connection." type="mixed" variable="$dsn">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="106" name="param" description="The username for the PDO connection." type="string" variable="$username">
            <type by_reference="false">string</type>
          </tag>
          <tag line="106" name="param" description="The password for the PDO connection." type="string" variable="$password">
            <type by_reference="false">string</type>
          </tag>
          <tag line="106" name="param" description="Options for PDO connection." type="array" variable="$options">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="120">
          <name>$profiler</name>
          <default/>
          <type>ProfilerInterface</type>
        </argument>
        <argument line="121">
          <name>$column_factory</name>
          <default/>
          <type>ColumnFactory</type>
        </argument>
        <argument line="122">
          <name>$dsn</name>
          <default/>
          <type/>
        </argument>
        <argument line="123">
          <name>$username</name>
          <default>null</default>
          <type/>
        </argument>
        <argument line="124">
          <name>$password</name>
          <default>null</default>
          <type/>
        </argument>
        <argument line="125">
          <name>$options</name>
          <default>[]</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="142" package="Default">
        <name>getProfiler</name>
        <docblock>
          <description>Returns the profiler object.</description>
          <long-description/>
          <tag line="135" name="return" description="" type="\Aura\Sql\ProfilerInterface">
            <type by_reference="false">\Aura\Sql\ProfilerInterface</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="154" package="Default">
        <name>getColumnFactory</name>
        <docblock>
          <description>Returns the column factory object.</description>
          <long-description/>
          <tag line="147" name="return" description="" type="\Aura\Sql\ColumnFactory">
            <type by_reference="false">\Aura\Sql\ColumnFactory</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="166" package="Default">
        <name>getDsnString</name>
        <docblock>
          <description>Returns the DSN string used by the PDO connection.</description>
          <long-description/>
          <tag line="159" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="191" package="Default">
        <name>getPdo</name>
        <docblock>
          <description>Returns the PDO connection object; if it does not exist, creates it to
connect to the database.</description>
          <long-description/>
          <tag line="183" name="return" description="" type="\PDO">
            <type by_reference="false">\PDO</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="206" package="Default">
        <name>connect</name>
        <docblock>
          <description>Connects to the database by creating the PDO object.</description>
          <long-description/>
          <tag line="199" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="220" package="Default">
        <name>preConnect</name>
        <docblock>
          <description>A hook that executes before the database connection is created.</description>
          <long-description/>
          <tag line="213" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="231" package="Default">
        <name>postConnect</name>
        <docblock>
          <description>A hook that executes after the database connection is created.</description>
          <long-description/>
          <tag line="224" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="249" package="Default">
        <name>query</name>
        <docblock>
          <description>Prepares and executes an SQL query, optionally binding values
to named placeholders in the query text.</description>
          <long-description/>
          <tag line="235" name="param" description="The text of the SQL query, optionally with named placeholders." type="string" variable="$text">
            <type by_reference="false">string</type>
          </tag>
          <tag line="235" name="param" description="An associative array of data to bind to the named placeholders." type="array" variable="$data">
            <type by_reference="false">array</type>
          </tag>
          <tag line="235" name="return" description="" type="\PDOStatement">
            <type by_reference="false">\PDOStatement</type>
          </tag>
        </docblock>
        <argument line="249">
          <name>$text</name>
          <default/>
          <type/>
        </argument>
        <argument line="249">
          <name>$data</name>
          <default>[]</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="263" package="Default">
        <name>beginTransaction</name>
        <docblock>
          <description>Begins a database transaction and turns off autocommit.</description>
          <long-description/>
          <tag line="256" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="279" package="Default">
        <name>commit</name>
        <docblock>
          <description>Commits the current database transaction and turns autocommit back on.</description>
          <long-description/>
          <tag line="272" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="296" package="Default">
        <name>rollback</name>
        <docblock>
          <description>Rolls back the current database transaction and turns autocommit back
on.</description>
          <long-description/>
          <tag line="288" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="325" package="Default">
        <name>prepare</name>
        <docblock>
          <description>Creates a prepared PDOStatment and binds data values to placeholders.</description>
          <long-description>&lt;p&gt;PDO itself is touchy about binding values.  If you attempt to bind a
value that does not have a corresponding placeholder, PDO will error.
This method checks the query text to find placeholders and binds only
data values that have placeholders in the text.&lt;/p&gt;

&lt;p&gt;Similarly, PDO won't bind an array value. This method checks to see if
the data to be bound is an array; if it is, the array is quoted and
replaced into the text directly instead of binding it.&lt;/p&gt;</long-description>
          <tag line="305" name="param" description="The text of the SQL query." type="string" variable="$text">
            <type by_reference="false">string</type>
          </tag>
          <tag line="305" name="param" description="The values to bind (or quote) into the PDOStatement." type="array" variable="$data">
            <type by_reference="false">array</type>
          </tag>
          <tag line="305" name="return" description="" type="\PDOStatement">
            <type by_reference="false">\PDOStatement</type>
          </tag>
        </docblock>
        <argument line="325">
          <name>$text</name>
          <default/>
          <type/>
        </argument>
        <argument line="325">
          <name>$data</name>
          <default/>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="406" package="Default">
        <name>fetchAll</name>
        <docblock>
          <description>Fetches all rows from the database using sequential keys.</description>
          <long-description/>
          <tag line="393" name="param" description="The text of the SQL statement, optionally with named placeholders." type="string" variable="$text">
            <type by_reference="false">string</type>
          </tag>
          <tag line="393" name="param" description="An associative array of data to bind to the named placeholders." type="array" variable="$data">
            <type by_reference="false">array</type>
          </tag>
          <tag line="393" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="406">
          <name>$text</name>
          <default/>
          <type/>
        </argument>
        <argument line="406">
          <name>$data</name>
          <default>[]</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="429" package="Default">
        <name>fetchAssoc</name>
        <docblock>
          <description>Fetches all rows from the database using associative keys (defined by
the first column).</description>
          <long-description>&lt;p&gt;N.b.: if multiple rows have the same first column value, the last
row with that value will override earlier rows.&lt;/p&gt;</long-description>
          <tag line="412" name="param" description="The text of the SQL statement, optionally with named placeholders." type="string" variable="$text">
            <type by_reference="false">string</type>
          </tag>
          <tag line="412" name="param" description="An associative array of data to bind to the named placeholders." type="array" variable="$data">
            <type by_reference="false">array</type>
          </tag>
          <tag line="412" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="429">
          <name>$text</name>
          <default/>
          <type/>
        </argument>
        <argument line="429">
          <name>$data</name>
          <default>[]</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="453" package="Default">
        <name>fetchCol</name>
        <docblock>
          <description>Fetches the first column of all rows as a sequential array.</description>
          <long-description/>
          <tag line="440" name="param" description="The text of the SQL statement, optionally with named placeholders." type="string" variable="$text">
            <type by_reference="false">string</type>
          </tag>
          <tag line="440" name="param" description="An associative array of data to bind to the named placeholders." type="array" variable="$data">
            <type by_reference="false">array</type>
          </tag>
          <tag line="440" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="453">
          <name>$text</name>
          <default/>
          <type/>
        </argument>
        <argument line="453">
          <name>$data</name>
          <default>[]</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="472" package="Default">
        <name>fetchValue</name>
        <docblock>
          <description>Fetches the very first value (i.e., first column of the first row).</description>
          <long-description/>
          <tag line="459" name="param" description="The text of the SQL statement, optionally with named placeholders." type="string" variable="$text">
            <type by_reference="false">string</type>
          </tag>
          <tag line="459" name="param" description="An associative array of data to bind to the named placeholders." type="array" variable="$data">
            <type by_reference="false">array</type>
          </tag>
          <tag line="459" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="472">
          <name>$text</name>
          <default/>
          <type/>
        </argument>
        <argument line="472">
          <name>$data</name>
          <default>[]</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="492" package="Default">
        <name>fetchPairs</name>
        <docblock>
          <description>Fetches an associative array of all rows as key-value pairs (first
column is the key, second column is the value).</description>
          <long-description/>
          <tag line="478" name="param" description="The text of the SQL statement, optionally with named placeholders." type="string" variable="$text">
            <type by_reference="false">string</type>
          </tag>
          <tag line="478" name="param" description="An associative array of data to bind to the named placeholders." type="array" variable="$data">
            <type by_reference="false">array</type>
          </tag>
          <tag line="478" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="492">
          <name>$text</name>
          <default/>
          <type/>
        </argument>
        <argument line="492">
          <name>$data</name>
          <default>[]</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="515" package="Default">
        <name>fetchOne</name>
        <docblock>
          <description>Fetches one row from the database.</description>
          <long-description/>
          <tag line="502" name="param" description="The text of the SQL statement, optionally with named placeholders." type="string" variable="$text">
            <type by_reference="false">string</type>
          </tag>
          <tag line="502" name="param" description="An associative array of data to bind to the named placeholders." type="array" variable="$data">
            <type by_reference="false">array</type>
          </tag>
          <tag line="502" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="515">
          <name>$text</name>
          <default/>
          <type/>
        </argument>
        <argument line="515">
          <name>$data</name>
          <default>[]</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="535" package="Default">
        <name>quote</name>
        <docblock>
          <description>Safely quotes a value for an SQL statement.</description>
          <long-description>&lt;p&gt;If an array is passed as the value, the array values are quoted
and then returned as a comma-separated string; this is useful
for generating &lt;code&gt;IN()&lt;/code&gt; lists.&lt;/p&gt;</long-description>
          <tag line="521" name="param" description="The value to quote." type="mixed" variable="$val">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="521" name="return" description="An SQL-safe quoted value (or a string of separated-and-quoted values)." type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="535">
          <name>$val</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="567" package="Default">
        <name>quoteInto</name>
        <docblock>
          <description>Quotes a value and places into a piece of text at a placeholder; the
placeholder is a question-mark.</description>
          <long-description/>
          <tag line="552" name="param" description="The text with placeholder(s)." type="string" variable="$text">
            <type by_reference="false">string</type>
          </tag>
          <tag line="552" name="param" description="The data value(s) to quote." type="mixed" variable="$data">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="552" name="return" description="An SQL-safe quoted value (or string of separated values) placed into the orignal text." type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="552" name="see" description="\Aura\Sql\Adapter\quote()" refers="\Aura\Sql\Adapter\quote()"/>
        </docblock>
        <argument line="567">
          <name>$text</name>
          <default/>
          <type/>
        </argument>
        <argument line="567">
          <name>$data</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="637" package="Default">
        <name>quoteMulti</name>
        <docblock>
          <description>Quote multiple text-and-value pieces.</description>
          <long-description>&lt;p&gt;The placeholder is a question-mark; all placeholders will be replaced
with the quoted value.   For example ...&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$list = [
     "WHERE date &amp;gt; ?"   =&amp;gt; '2005-01-01',
     "  AND date &amp;lt; ?"   =&amp;gt; '2005-02-01',
     "  AND type IN(?)" =&amp;gt; ['a', 'b', 'c'],
];

$safe = $sql-&amp;gt;quoteMulti($list);

// $safe = "WHERE date &amp;gt; '2005-01-02'
//          AND date &amp;lt; 2005-02-01
//          AND type IN('a','b','c')"
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;}}&lt;/p&gt;</long-description>
          <tag line="605" name="param" description="A series of key-value pairs where the key is the placeholder text and the value is the value to be quoted into it. If the key is an integer, it is assumed that the value is piece of literal text to be used and not quoted." type="array" variable="$list">
            <type by_reference="false">array</type>
          </tag>
          <tag line="605" name="param" description="Return the list pieces separated with this string (for example ' AND ')." type="string" variable="$sep">
            <type by_reference="false">string</type>
          </tag>
          <tag line="605" name="return" description="An SQL-safe string composed of the list keys and quoted values." type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="637">
          <name>$list</name>
          <default/>
          <type/>
        </argument>
        <argument line="637">
          <name>$sep</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="677" package="Default">
        <name>quoteName</name>
        <docblock>
          <description>Quotes a single identifier name (table, table alias, table column,
index, sequence).</description>
          <long-description>&lt;p&gt;If the name contains &lt;code&gt;' AS '&lt;/code&gt;, this method will separately quote the
parts before and after the &lt;code&gt;' AS '&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If the name contains a space, this method will separately quote the
parts before and after the space.&lt;/p&gt;

&lt;p&gt;If the name contains a dot, this method will separately quote the
parts before and after the dot.&lt;/p&gt;</long-description>
          <tag line="656" name="param" description="The identifier name to quote." type="string" variable="$spec">
            <type by_reference="false">string</type>
          </tag>
          <tag line="656" name="return" description="The quoted identifier name." type="string|array">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="656" name="see" description="\Aura\Sql\Adapter\replaceName()" refers="\Aura\Sql\Adapter\replaceName()"/>
        </docblock>
        <argument line="677">
          <name>$spec</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="735" package="Default">
        <name>quoteNamesIn</name>
        <docblock>
          <description>Quotes all fully-qualified identifier names ("table.col") in a string,
typically an SQL snippet for a SELECT clause.</description>
          <long-description>&lt;p&gt;Does not quote identifier names that are string literals (i.e., inside
single or double quotes).&lt;/p&gt;

&lt;p&gt;Looks for a trailing ' AS alias' and quotes the alias as well.&lt;/p&gt;</long-description>
          <tag line="717" name="param" description="The string in which to quote fully-qualified identifier names to quote." type="string" variable="$text">
            <type by_reference="false">string</type>
          </tag>
          <tag line="717" name="return" description="The string with names quoted in it." type="string|array">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="717" name="see" description="\Aura\Sql\Adapter\replaceNamesIn()" refers="\Aura\Sql\Adapter\replaceNamesIn()"/>
        </docblock>
        <argument line="735">
          <name>$text</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="804" package="Default">
        <name>insert</name>
        <docblock>
          <description>Inserts a row of data into a table.</description>
          <long-description/>
          <tag line="792" name="param" description="The table to insert into." type="string" variable="$table">
            <type by_reference="false">string</type>
          </tag>
          <tag line="792" name="param" description="An associative array where the key is the column name and the value is the value to insert for that column." type="array" variable="$cols">
            <type by_reference="false">array</type>
          </tag>
          <tag line="792" name="return" description="The number of rows affected, typically 1." type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
        <argument line="804">
          <name>$table</name>
          <default/>
          <type/>
        </argument>
        <argument line="804">
          <name>$cols</name>
          <default/>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="846" package="Default">
        <name>update</name>
        <docblock>
          <description>Updates a table with specified data based on WHERE conditions.</description>
          <long-description/>
          <tag line="829" name="param" description="The table to udpate." type="string" variable="$table">
            <type by_reference="false">string</type>
          </tag>
          <tag line="829" name="param" description="An associative array where the key is the column name and the value is the value to use for that column." type="array" variable="$cols">
            <type by_reference="false">array</type>
          </tag>
          <tag line="829" name="param" description="Conditions for a WHERE clause." type="string" variable="$cond">
            <type by_reference="false">string</type>
          </tag>
          <tag line="829" name="param" description="Additional data to bind to the query; note that the $cols values will take precedence over these additional values." type="array" variable="$data">
            <type by_reference="false">array</type>
          </tag>
          <tag line="829" name="return" description="The number of rows affected." type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
        <argument line="846">
          <name>$table</name>
          <default/>
          <type/>
        </argument>
        <argument line="846">
          <name>$cols</name>
          <default/>
          <type>array</type>
        </argument>
        <argument line="846">
          <name>$cond</name>
          <default/>
          <type/>
        </argument>
        <argument line="846">
          <name>$data</name>
          <default>[]</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="885" package="Default">
        <name>delete</name>
        <docblock>
          <description>Deletes rows from the table based on WHERE conditions.</description>
          <long-description/>
          <tag line="872" name="param" description="The table to delete from." type="string" variable="$table">
            <type by_reference="false">string</type>
          </tag>
          <tag line="872" name="param" description="Conditions for a WHERE clause." type="string" variable="$cond">
            <type by_reference="false">string</type>
          </tag>
          <tag line="872" name="param" description="Additional data to bind to the query." type="array" variable="$data">
            <type by_reference="false">array</type>
          </tag>
          <tag line="872" name="return" description="The number of rows affected." type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
        <argument line="885">
          <name>$table</name>
          <default/>
          <type/>
        </argument>
        <argument line="885">
          <name>$cond</name>
          <default/>
          <type/>
        </argument>
        <argument line="885">
          <name>$data</name>
          <default>[]</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" line="906" package="Default">
        <name>newPdo</name>
        <docblock>
          <description>Creates a new PDO object.</description>
          <long-description/>
          <tag line="899" name="return" description="" type="\PDO">
            <type by_reference="false">\PDO</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" line="930" package="Default">
        <name>replaceName</name>
        <docblock>
          <description>Quotes an identifier name (table, index, etc); ignores empty values and
values of '*'.</description>
          <long-description/>
          <tag line="918" name="param" description="The identifier name to quote." type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="918" name="return" description="The quoted identifier name." type="string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="918" name="see" description="\Aura\Sql\Adapter\quoteName()" refers="\Aura\Sql\Adapter\quoteName()"/>
        </docblock>
        <argument line="930">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" line="954" package="Default">
        <name>replaceNamesIn</name>
        <docblock>
          <description>Quotes all fully-qualified identifier names ("table.col") in a string.</description>
          <long-description/>
          <tag line="942" name="param" description="The string in which to quote fully-qualified identifier names to quote." type="string" variable="$text">
            <type by_reference="false">string</type>
          </tag>
          <tag line="942" name="return" description="The string with names quoted in it." type="string|array">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="942" name="see" description="\Aura\Sql\Adapter\quoteNamesIn()" refers="\Aura\Sql\Adapter\quoteNamesIn()"/>
        </docblock>
        <argument line="954">
          <name>$text</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" line="987" package="Default">
        <name>getTypeSizeScope</name>
        <docblock>
          <description>Given a column specification, parse into datatype, size, and
decimal scale.</description>
          <long-description/>
          <tag line="976" name="param" description="The column specification; for example, &quot;VARCHAR(255)&quot; or &quot;NUMERIC(10,2)&quot;." type="string" variable="$spec">
            <type by_reference="false">string</type>
          </tag>
          <tag line="976" name="return" description="A sequential array of the column type, size, and scale." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="987">
          <name>$spec</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" line="1028" package="Default">
        <name>fetchTableList</name>
        <docblock>
          <description>Returns an list of tables in the database.</description>
          <long-description/>
          <tag line="1018" name="param" description="Optionally, pass a schema name to get the list of tables in this schema." type="string" variable="$schema">
            <type by_reference="false">string</type>
          </tag>
          <tag line="1018" name="return" description="The list of tables in the database." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="1028">
          <name>$schema</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" line="1041" package="Default">
        <name>fetchTableCols</name>
        <docblock>
          <description>Returns an array of columns in a table.</description>
          <long-description/>
          <tag line="1030" name="param" description="Return the columns in this table. This may be just a `table` name, or a `schema.table` name." type="string" variable="$spec">
            <type by_reference="false">string</type>
          </tag>
          <tag line="1030" name="return" description="An associative array where the key is the column name and the value is a Column object." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="1041">
          <name>$spec</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" line="1055" package="Default">
        <name>splitName</name>
        <docblock>
          <description>Splits an identifier name into two parts, based on the location of the
first dot.</description>
          <long-description/>
          <tag line="1043" name="param" description="The identifier name to be split." type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="1043" name="return" description="An array of two elements; element 0 is the parts before the dot, and element 1 is the part after the dot. If there was no dot, element 0 will be null and element 1 will be the name as given." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="1055">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="Aura/Sql/Adapter/Mysql.php" hash="cc68e8167ea7185bcde612ab7bdc3eda" package="Default">
    <class final="false" abstract="false" line="18" namespace="Aura\Sql\Adapter" package="Aura\Sql">
      <name>Mysql</name>
      <extends>\Aura\Sql\Adapter\AbstractAdapter</extends>
      <full_name>\Aura\Sql\Adapter\Mysql</full_name>
      <docblock>
        <description>MySql adapter.</description>
        <long-description/>
        <tag line="11" name="package" description="Aura.Sql"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="28" package="Default">
        <name>$dsn</name>
        <default>[
        'host' =&gt; null</default>
        <docblock>
          <description>The PDO DSN for the connection. This can be an array of key-value pairs
or a string (minus the PDO type prefix).</description>
          <long-description/>
          <tag line="20" name="var" description="" type="string|array">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="43" package="Default">
        <name>$dsn_prefix</name>
        <default>'mysql'</default>
        <docblock>
          <description>The PDO type prefix.</description>
          <long-description/>
          <tag line="36" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="52" package="Default">
        <name>$quote_name_prefix</name>
        <default>'`'</default>
        <docblock>
          <description>The prefix to use when quoting identifier names.</description>
          <long-description/>
          <tag line="45" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="61" package="Default">
        <name>$quote_name_suffix</name>
        <default>'`'</default>
        <docblock>
          <description>The suffix to use when quoting identifier names.</description>
          <long-description/>
          <tag line="54" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" line="73" package="Default">
        <name>fetchTableList</name>
        <docblock>
          <description>Returns an list of tables in the database.</description>
          <long-description/>
          <tag line="63" name="param" description="Optionally, pass a schema name to get the list of tables in this schema." type="string" variable="$schema">
            <type by_reference="false">string</type>
          </tag>
          <tag line="63" name="return" description="The list of tables in the database." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="73">
          <name>$schema</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="93" package="Default">
        <name>fetchTableCols</name>
        <docblock>
          <description>Returns an array of columns in a table.</description>
          <long-description/>
          <tag line="82" name="param" description="Return the columns in this table. This may be just a `table` name, or a `schema.table` name." type="string" variable="$spec">
            <type by_reference="false">string</type>
          </tag>
          <tag line="82" name="return" description="An associative array where the key is the column name and the value is a Column object." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="93">
          <name>$spec</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" line="144" package="Default">
        <name>getDefault</name>
        <docblock>
          <description>A helper method to get the default value for a column.</description>
          <long-description/>
          <tag line="135" name="param" description="The default value as reported by MySQL." type="string" variable="$default">
            <type by_reference="false">string</type>
          </tag>
          <tag line="135" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="144">
          <name>$default</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="163" package="Default">
        <name>lastInsertId</name>
        <docblock>
          <description>Returns the last ID inserted on the connection.</description>
          <long-description/>
          <tag line="156" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="Aura/Sql/Adapter/Pgsql.php" hash="ab9671adfb0252ffe7387f724f631ea8" package="Default">
    <class final="false" abstract="false" line="18" namespace="Aura\Sql\Adapter" package="Aura\Sql">
      <name>Pgsql</name>
      <extends>\Aura\Sql\Adapter\AbstractAdapter</extends>
      <full_name>\Aura\Sql\Adapter\Pgsql</full_name>
      <docblock>
        <description>PostgreSQL adapter.</description>
        <long-description/>
        <tag line="11" name="package" description="Aura.Sql"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="28" package="Default">
        <name>$dsn</name>
        <default>[
        'host' =&gt; null</default>
        <docblock>
          <description>The PDO DSN for the connection. This can be an array of key-value pairs
or a string (minus the PDO type prefix).</description>
          <long-description/>
          <tag line="20" name="var" description="" type="string|array">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="43" package="Default">
        <name>$dsn_prefix</name>
        <default>'pgsql'</default>
        <docblock>
          <description>The PDO type prefix.</description>
          <long-description/>
          <tag line="36" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="52" package="Default">
        <name>$quote_name_prefix</name>
        <default>'"'</default>
        <docblock>
          <description>The prefix to use when quoting identifier names.</description>
          <long-description/>
          <tag line="45" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="61" package="Default">
        <name>$quote_name_suffix</name>
        <default>'"'</default>
        <docblock>
          <description>The suffix to use when quoting identifier names.</description>
          <long-description/>
          <tag line="54" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" line="73" package="Default">
        <name>fetchTableList</name>
        <docblock>
          <description>Returns a list of all tables in the database.</description>
          <long-description/>
          <tag line="63" name="param" description="Fetch tbe list of tables in this schema; when empty, uses the default schema." type="string" variable="$schema">
            <type by_reference="false">string</type>
          </tag>
          <tag line="63" name="return" description="All table names in the database." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="73">
          <name>$schema</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="104" package="Default">
        <name>fetchTableCols</name>
        <docblock>
          <description>Returns an array of columns in a table.</description>
          <long-description/>
          <tag line="93" name="param" description="Return the columns in this table. This may be just a `table` name, or a `schema.table` name." type="string" variable="$spec">
            <type by_reference="false">string</type>
          </tag>
          <tag line="93" name="return" description="An associative array where the key is the column name and the value is a Column object." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="104">
          <name>$spec</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" line="174" package="Default">
        <name>getDefault</name>
        <docblock>
          <description>Given a native column SQL default value, finds a PHP literal value.</description>
          <long-description>&lt;p&gt;SQL NULLs are converted to PHP nulls.  Non-literal values (such as
keywords and functions) are also returned as null.&lt;/p&gt;</long-description>
          <tag line="162" name="param" description="The column default SQL value." type="string" variable="$default">
            <type by_reference="false">string</type>
          </tag>
          <tag line="162" name="return" description="A literal PHP value." type="\Aura\Sql\Adapter\scalar">
            <type by_reference="false">\Aura\Sql\Adapter\scalar</type>
          </tag>
        </docblock>
        <argument line="174">
          <name>$default</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="210" package="Default">
        <name>lastInsertId</name>
        <docblock>
          <description>Returns the last ID inserted on the connection for a given table
and column sequence.</description>
          <long-description>&lt;p&gt;PostgreSQL uses a sequence named for the table and column to track
auto-incremented IDs; you need to pass the table and column name to
tell PostgreSQL which sequence to check.&lt;/p&gt;</long-description>
          <tag line="194" name="param" description="The table to check the last inserted ID on." type="string" variable="$table">
            <type by_reference="false">string</type>
          </tag>
          <tag line="194" name="param" description="The column to check the last inserted ID on." type="string" variable="$col">
            <type by_reference="false">string</type>
          </tag>
          <tag line="194" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="210">
          <name>$table</name>
          <default/>
          <type/>
        </argument>
        <argument line="210">
          <name>$col</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="Aura/Sql/Adapter/Sqlite.php" hash="87b154b417d97116dd2bf145a06daffe" package="Default">
    <class final="false" abstract="false" line="18" namespace="Aura\Sql\Adapter" package="Aura\Sql">
      <name>Sqlite</name>
      <extends>\Aura\Sql\Adapter\AbstractAdapter</extends>
      <full_name>\Aura\Sql\Adapter\Sqlite</full_name>
      <docblock>
        <description>SQLite adapter.</description>
        <long-description/>
        <tag line="11" name="package" description="Aura.Sql"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="29" package="Default">
        <name>$autoinc_string</name>
        <default>'INTEGER PRIMARY KEY AUTOINCREMENT'</default>
        <docblock>
          <description>The string used for SQLite autoincrement data types.</description>
          <long-description>&lt;p&gt;This is different for versions 2 and 3 of SQLite.&lt;/p&gt;</long-description>
          <tag line="20" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="38" package="Default">
        <name>$dsn</name>
        <default>null</default>
        <docblock>
          <description>The PDO DSN for the connection, typically a file path.</description>
          <long-description/>
          <tag line="31" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="47" package="Default">
        <name>$dsn_prefix</name>
        <default>'sqlite'</default>
        <docblock>
          <description>The PDO type prefix.</description>
          <long-description/>
          <tag line="40" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="56" package="Default">
        <name>$quote_name_prefix</name>
        <default>'"'</default>
        <docblock>
          <description>The quote character before an entity name (table, index, etc).</description>
          <long-description/>
          <tag line="49" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="65" package="Default">
        <name>$quote_name_suffix</name>
        <default>'"'</default>
        <docblock>
          <description>The quote character after an entity name (table, index, etc).</description>
          <long-description/>
          <tag line="58" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" line="77" package="Default">
        <name>fetchTableList</name>
        <docblock>
          <description>Returns a list of tables in the database.</description>
          <long-description/>
          <tag line="67" name="param" description="Optionally, pass a schema name to get the list of tables in this schema." type="string" variable="$schema">
            <type by_reference="false">string</type>
          </tag>
          <tag line="67" name="return" description="The list of tables in the database." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="77">
          <name>$schema</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="107" package="Default">
        <name>fetchTableCols</name>
        <docblock>
          <description>Describes the columns in a table.</description>
          <long-description/>
          <tag line="96" name="param" description="Return the columns in this table. This may be just a `table` name, or a `schema.table` name." type="string" variable="$spec">
            <type by_reference="false">string</type>
          </tag>
          <tag line="96" name="return" description="An associative array where the key is the column name and the value is a Column object." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="107">
          <name>$spec</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="234" package="Default">
        <name>lastInsertId</name>
        <docblock>
          <description>Returns the last ID inserted on the connection.</description>
          <long-description/>
          <tag line="227" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="Aura/Sql/Adapter/Sqlsrv.php" hash="9bc39b86288d06bb288c96dc91625579" package="Default">
    <class final="false" abstract="false" line="18" namespace="Aura\Sql\Adapter" package="Aura\Sql">
      <name>Sqlsrv</name>
      <extends>\Aura\Sql\Adapter\AbstractAdapter</extends>
      <full_name>\Aura\Sql\Adapter\Sqlsrv</full_name>
      <docblock>
        <description>Microsoft SQL Server adapter.</description>
        <long-description/>
        <tag line="11" name="package" description="Aura.Sql"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="28" package="Default">
        <name>$dsn</name>
        <default>[
        'Server' =&gt; null</default>
        <docblock>
          <description>The PDO DSN for the connection. This can be an array of key-value pairs
or a string (minus the PDO type prefix).</description>
          <long-description/>
          <tag line="20" name="var" description="" type="string|array">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="40" package="Default">
        <name>$dsn_prefix</name>
        <default>'sqlsrv'</default>
        <docblock>
          <description>The PDO type prefix.</description>
          <long-description/>
          <tag line="33" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="49" package="Default">
        <name>$quote_name_prefix</name>
        <default>'['</default>
        <docblock>
          <description>The prefix to use when quoting identifier names.</description>
          <long-description/>
          <tag line="42" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="58" package="Default">
        <name>$quote_name_suffix</name>
        <default>']'</default>
        <docblock>
          <description>The suffix to use when quoting identifier names.</description>
          <long-description/>
          <tag line="51" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" line="72" package="Default">
        <name>fetchTableList</name>
        <docblock>
          <description>Returns a list of all tables in the database.</description>
          <long-description/>
          <tag line="60" name="param" description="Fetch tbe list of tables in this schema; when empty, uses the default schema." type="string" variable="$schema">
            <type by_reference="false">string</type>
          </tag>
          <tag line="60" name="return" description="All table names in the database." type="array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="60" name="todo" description="Honor the $schema param."/>
        </docblock>
        <argument line="72">
          <name>$schema</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="91" package="Default">
        <name>fetchTableCols</name>
        <docblock>
          <description>Returns an array of columns in a table.</description>
          <long-description/>
          <tag line="78" name="param" description="Return the columns in this table. This may be just a `table` name, or a `schema.table` name." type="string" variable="$spec">
            <type by_reference="false">string</type>
          </tag>
          <tag line="78" name="return" description="An associative array where the key is the column name and the value is a Column object." type="array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="78" name="todo" description="Honor `schema.table` as the specification."/>
        </docblock>
        <argument line="91">
          <name>$spec</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="Aura/Sql/AdapterFactory.php" hash="47152ca82583d9d4b28eeed8ad5633d6" package="Default">
    <class final="false" abstract="false" line="18" namespace="Aura\Sql" package="Aura\Sql">
      <name>AdapterFactory</name>
      <extends/>
      <full_name>\Aura\Sql\AdapterFactory</full_name>
      <docblock>
        <description>A factory for adapter objects.</description>
        <long-description/>
        <tag line="11" name="package" description="Aura.Sql"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="27" package="Default">
        <name>$map</name>
        <default>[
        'mysql'  =&gt; 'Aura\Sql\Adapter\Mysql'</default>
        <docblock>
          <description>A map of short adapter names to fully-qualified classes.</description>
          <long-description/>
          <tag line="20" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" line="40" package="Default">
        <name>__construct</name>
        <docblock>
          <description>Constructor.</description>
          <long-description/>
          <tag line="33" name="param" description="An override map of adapter names to classes." type="array" variable="$map">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="40">
          <name>$map</name>
          <default>[]</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="62" package="Default">
        <name>newInstance</name>
        <docblock>
          <description>Returns a new adapter instance.</description>
          <long-description/>
          <tag line="45" name="param" description="The name of the adapter." type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="45" name="param" description="The DSN for the adapter." type="mixed" variable="$dsn">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="45" name="param" description="The username for the adapter." type="string" variable="$username">
            <type by_reference="false">string</type>
          </tag>
          <tag line="45" name="param" description="The password for the adapter." type="string" variable="$password">
            <type by_reference="false">string</type>
          </tag>
          <tag line="45" name="param" description="PDO options for the adapter." type="array" variable="$options">
            <type by_reference="false">array</type>
          </tag>
          <tag line="45" name="return" description="" type="\Aura\Sql\AbstractAdapter">
            <type by_reference="false">\Aura\Sql\AbstractAdapter</type>
          </tag>
        </docblock>
        <argument line="63">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
        <argument line="64">
          <name>$dsn</name>
          <default/>
          <type/>
        </argument>
        <argument line="65">
          <name>$username</name>
          <default>null</default>
          <type/>
        </argument>
        <argument line="66">
          <name>$password</name>
          <default>null</default>
          <type/>
        </argument>
        <argument line="67">
          <name>$options</name>
          <default>[]</default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="Aura/Sql/Column.php" hash="19a27d993fc3c33904838b117f899676" package="Default">
    <parse_markers>
      <notice line="118">Name of argument $notnull does not match with function Docblock</notice>
      <notice line="119">Name of argument $default does not match with function Docblock</notice>
      <notice line="120">Name of argument $autoinc does not match with function Docblock</notice>
      <notice line="121">Argument $primary is missing from the function Docblock</notice>
    </parse_markers>
    <class final="false" abstract="false" line="18" namespace="Aura\Sql" package="Aura\Sql">
      <name>Column</name>
      <extends/>
      <full_name>\Aura\Sql\Column</full_name>
      <docblock>
        <description>Represents one column from a table.</description>
        <long-description/>
        <tag line="11" name="package" description="Aura.Sql"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="27" package="Default">
        <name>$name</name>
        <default/>
        <docblock>
          <description>The name of the column.</description>
          <long-description/>
          <tag line="20" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="36" package="Default">
        <name>$type</name>
        <default/>
        <docblock>
          <description>The datatype of the column.</description>
          <long-description/>
          <tag line="29" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="46" package="Default">
        <name>$size</name>
        <default/>
        <docblock>
          <description>The size of the column; typically, this is a number of bytes or
characters for the column as a whole.</description>
          <long-description/>
          <tag line="38" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="55" package="Default">
        <name>$scale</name>
        <default/>
        <docblock>
          <description>The scale of the column (i.e., the number of decimal places).</description>
          <long-description/>
          <tag line="48" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="64" package="Default">
        <name>$notnull</name>
        <default/>
        <docblock>
          <description>Is the column marked as `NOT NULL`?</description>
          <long-description/>
          <tag line="57" name="var" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="73" package="Default">
        <name>$default</name>
        <default/>
        <docblock>
          <description>The default value of the column.</description>
          <long-description/>
          <tag line="66" name="var" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="82" package="Default">
        <name>$autoinc</name>
        <default/>
        <docblock>
          <description>Is the column auto-incremented?</description>
          <long-description/>
          <tag line="75" name="var" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="91" package="Default">
        <name>$primary</name>
        <default/>
        <docblock>
          <description>Is the column part of the primary key?</description>
          <long-description/>
          <tag line="84" name="var" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" line="113" package="Default">
        <name>__construct</name>
        <docblock>
          <description>Constructor.</description>
          <long-description/>
          <tag line="93" name="param" description="The name of the column." type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="93" name="param" description="The datatype of the column." type="string" variable="$type">
            <type by_reference="false">string</type>
          </tag>
          <tag line="93" name="param" description="The size of the column." type="int" variable="$size">
            <type by_reference="false">int</type>
          </tag>
          <tag line="93" name="param" description="The scale of the column (i.e., the number of digits after the decimal point)." type="int" variable="$scale">
            <type by_reference="false">int</type>
          </tag>
          <tag line="93" name="param" description="The default value of the column." type="mixed" variable="$default">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="93" name="param" description="Is the column auto-incremented?" type="bool" variable="$autoinc">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="93" name="param" description="Is the column part of the primary key?" type="bool" variable="$primary">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="114">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
        <argument line="115">
          <name>$type</name>
          <default/>
          <type/>
        </argument>
        <argument line="116">
          <name>$size</name>
          <default/>
          <type/>
        </argument>
        <argument line="117">
          <name>$scale</name>
          <default/>
          <type/>
        </argument>
        <argument line="118">
          <name>$notnull</name>
          <default/>
          <type/>
        </argument>
        <argument line="119">
          <name>$default</name>
          <default/>
          <type/>
        </argument>
        <argument line="120">
          <name>$autoinc</name>
          <default/>
          <type/>
        </argument>
        <argument line="121">
          <name>$primary</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="142" package="Default">
        <name>__get</name>
        <docblock>
          <description>Returns property values.</description>
          <long-description/>
          <tag line="133" name="param" description="The property name." type="string" variable="$key">
            <type by_reference="false">string</type>
          </tag>
          <tag line="133" name="return" description="The property value." type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="142">
          <name>$key</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="Aura/Sql/ColumnFactory.php" hash="e6fa83a95567a8ca5d9f6bd30a0cbb02" package="Default">
    <parse_markers>
      <notice line="45">Name of argument $notnull does not match with function Docblock</notice>
      <notice line="46">Name of argument $default does not match with function Docblock</notice>
      <notice line="47">Name of argument $autoinc does not match with function Docblock</notice>
      <notice line="48">Argument $primary is missing from the function Docblock</notice>
    </parse_markers>
    <class final="false" abstract="false" line="18" namespace="Aura\Sql" package="Aura\Sql">
      <name>ColumnFactory</name>
      <extends/>
      <full_name>\Aura\Sql\ColumnFactory</full_name>
      <docblock>
        <description>A factory for column objects.</description>
        <long-description/>
        <tag line="11" name="package" description="Aura.Sql"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" line="40" package="Default">
        <name>newInstance</name>
        <docblock>
          <description>Returns a new Column object.</description>
          <long-description/>
          <tag line="20" name="param" description="The name of the column." type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="20" name="param" description="The datatype of the column." type="string" variable="$type">
            <type by_reference="false">string</type>
          </tag>
          <tag line="20" name="param" description="The size of the column." type="int" variable="$size">
            <type by_reference="false">int</type>
          </tag>
          <tag line="20" name="param" description="The scale of the column (i.e., the number of digits after the decimal point)." type="int" variable="$scale">
            <type by_reference="false">int</type>
          </tag>
          <tag line="20" name="param" description="The default value of the column." type="mixed" variable="$default">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="20" name="param" description="Is the column auto-incremented?" type="bool" variable="$autoinc">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="20" name="param" description="Is the column part of the primary key?" type="bool" variable="$primary">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="41">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
        <argument line="42">
          <name>$type</name>
          <default/>
          <type/>
        </argument>
        <argument line="43">
          <name>$size</name>
          <default/>
          <type/>
        </argument>
        <argument line="44">
          <name>$scale</name>
          <default/>
          <type/>
        </argument>
        <argument line="45">
          <name>$notnull</name>
          <default/>
          <type/>
        </argument>
        <argument line="46">
          <name>$default</name>
          <default/>
          <type/>
        </argument>
        <argument line="47">
          <name>$autoinc</name>
          <default/>
          <type/>
        </argument>
        <argument line="48">
          <name>$primary</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="Aura/Sql/ConnectionManager.php" hash="6e1b38ba22aa573f7100cb520b909c2f" package="Default">
    <class final="false" abstract="false" line="18" namespace="Aura\Sql" package="Aura\Sql">
      <name>ConnectionManager</name>
      <extends/>
      <full_name>\Aura\Sql\ConnectionManager</full_name>
      <docblock>
        <description>Manages connections to default, master, and slave databases.</description>
        <long-description/>
        <tag line="11" name="package" description="Aura.Sql"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="27" package="Default">
        <name>$adapter_factory</name>
        <default/>
        <docblock>
          <description>An SQL adapter factory.</description>
          <long-description/>
          <tag line="20" name="var" description="" type="\Aura\Sql\AdapterFactory">
            <type by_reference="false">\Aura\Sql\AdapterFactory</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="36" package="Default">
        <name>$conn</name>
        <default>[
        'default' =&gt; null</default>
        <docblock>
          <description>SQL adapter connection objects as constructed from their params.</description>
          <long-description/>
          <tag line="29" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="49" package="Default">
        <name>$default</name>
        <default>[
        'adapter'  =&gt; null</default>
        <docblock>
          <description>The default connection params.</description>
          <long-description/>
          <tag line="42" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="66" package="Default">
        <name>$masters</name>
        <default>[]</default>
        <docblock>
          <description>Params for one or more master connections. The key for each element in
the array is a name for the connection, and each value is an array of
connection params (cf. the `$default` array elements).</description>
          <long-description/>
          <tag line="57" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="77" package="Default">
        <name>$slaves</name>
        <default>[]</default>
        <docblock>
          <description>Params for one or more slave connections. The key for each element in
the array is a name for the connection, and each value is an array of
connection params (cf. the $default array elements).</description>
          <long-description/>
          <tag line="68" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" line="96" package="Default">
        <name>__construct</name>
        <docblock>
          <description>Constructor.</description>
          <long-description/>
          <tag line="79" name="param" description="An adapter factory to create connection objects." type="\Aura\Sql\AdapterFactory" variable="$adapter_factory">
            <type by_reference="false">\Aura\Sql\AdapterFactory</type>
          </tag>
          <tag line="79" name="param" description="An array of key-value pairs for the default connection." type="array" variable="$default">
            <type by_reference="false">array</type>
          </tag>
          <tag line="79" name="param" description="An array of key-value pairs where the key is the connection name and the value is an array of connection params." type="array" variable="$masters">
            <type by_reference="false">array</type>
          </tag>
          <tag line="79" name="param" description="An array of key-value pairs where the key is the connection name and the value is an array of connection params." type="array" variable="$slaves">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="97">
          <name>$adapter_factory</name>
          <default/>
          <type>AdapterFactory</type>
        </argument>
        <argument line="98">
          <name>$default</name>
          <default>[]</default>
          <type>array</type>
        </argument>
        <argument line="99">
          <name>$masters</name>
          <default>[]</default>
          <type>array</type>
        </argument>
        <argument line="100">
          <name>$slaves</name>
          <default>[]</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="121" package="Default">
        <name>setDefault</name>
        <docblock>
          <description>Sets the default connection params.</description>
          <long-description/>
          <tag line="112" name="param" description="The default connection params." type="array" variable="$params">
            <type by_reference="false">array</type>
          </tag>
          <tag line="112" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="121">
          <name>$params</name>
          <default/>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="137" package="Default">
        <name>setMaster</name>
        <docblock>
          <description>Sets the params for one master connection by name.</description>
          <long-description/>
          <tag line="126" name="param" description="The master connection name." type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="126" name="param" description="The master connection params." type="array" variable="$params">
            <type by_reference="false">array</type>
          </tag>
          <tag line="126" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="137">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
        <argument line="137">
          <name>$params</name>
          <default/>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="153" package="Default">
        <name>setSlave</name>
        <docblock>
          <description>Sets the params for one slave connection by name.</description>
          <long-description/>
          <tag line="142" name="param" description="The slave connection name." type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="142" name="param" description="The slave connection params." type="array" variable="$params">
            <type by_reference="false">array</type>
          </tag>
          <tag line="142" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="153">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
        <argument line="153">
          <name>$params</name>
          <default/>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="171" package="Default">
        <name>getRead</name>
        <docblock>
          <description>Returns a "read" connection.  Picks a connection in this order:</description>
          <long-description>&lt;ul&gt;
&lt;li&gt;&lt;p&gt;A random slave; or,&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If there are no slaves, a random master; or,&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If there are no masters, the default connection.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;</long-description>
          <tag line="158" name="return" description="" type="\Aura\Sql\AbstractAdapter">
            <type by_reference="false">\Aura\Sql\AbstractAdapter</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="193" package="Default">
        <name>getWrite</name>
        <docblock>
          <description>Returns a "write" connection.  Picks a connection in this order:</description>
          <long-description>&lt;ul&gt;
&lt;li&gt;&lt;p&gt;A random master; or,&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If there are no masters, the default connection.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;</long-description>
          <tag line="182" name="return" description="" type="\Aura\Sql\AbstractAdapter">
            <type by_reference="false">\Aura\Sql\AbstractAdapter</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="209" package="Default">
        <name>getDefault</name>
        <docblock>
          <description>Returns the default connection object.</description>
          <long-description/>
          <tag line="202" name="return" description="" type="\Aura\Sql\AbstractAdapter">
            <type by_reference="false">\Aura\Sql\AbstractAdapter</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="233" package="Default">
        <name>getMaster</name>
        <docblock>
          <description>Returns a "master" connection object by name.</description>
          <long-description/>
          <tag line="223" name="param" description="The master connection name; if not specified, returns a random master connection." type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="223" name="return" description="" type="\Aura\Sql\AbstractAdapter">
            <type by_reference="false">\Aura\Sql\AbstractAdapter</type>
          </tag>
        </docblock>
        <argument line="233">
          <name>$name</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="268" package="Default">
        <name>getSlave</name>
        <docblock>
          <description>Returns a "slave" connection object by name.</description>
          <long-description/>
          <tag line="258" name="param" description="The slave connection name; if not specified, returns a random slave." type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="258" name="return" description="" type="\Aura\Sql\AbstractAdapter">
            <type by_reference="false">\Aura\Sql\AbstractAdapter</type>
          </tag>
        </docblock>
        <argument line="268">
          <name>$name</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" line="304" package="Default">
        <name>merge</name>
        <docblock>
          <description>A somewhat more friendly merge function thatn array_merge_recursive()
(we need to override sequential values, not append them).</description>
          <long-description/>
          <tag line="292" name="param" description="The baseline values." type="array" variable="$baseline">
            <type by_reference="false">array</type>
          </tag>
          <tag line="292" name="param" description="The override values." type="array" variable="$override">
            <type by_reference="false">array</type>
          </tag>
          <tag line="292" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="304">
          <name>$baseline</name>
          <default/>
          <type/>
        </argument>
        <argument line="304">
          <name>$override</name>
          <default>[]</default>
          <type>array</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Aura/Sql/Exception/NoSuchMaster.php" hash="7e45695cd72acf3fa80c741965985fa5" package="Default">
    <class final="false" abstract="false" line="18" namespace="Aura\Sql\Exception" package="Aura\Sql">
      <name>NoSuchMaster</name>
      <extends>\Aura\Sql\Exception</extends>
      <full_name>\Aura\Sql\Exception\NoSuchMaster</full_name>
      <docblock>
        <description>No such master exception</description>
        <long-description/>
        <tag line="11" name="package" description="Aura.Sql"/>
      </docblock>
    </class>
  </file>
  <file path="Aura/Sql/Exception/NoSuchSlave.php" hash="53f1e86cac4aea84e4d267e4e8935563" package="Default">
    <class final="false" abstract="false" line="18" namespace="Aura\Sql\Exception" package="Aura\Sql">
      <name>NoSuchSlave</name>
      <extends>\Aura\Sql\Exception</extends>
      <full_name>\Aura\Sql\Exception\NoSuchSlave</full_name>
      <docblock>
        <description>No such slave exception</description>
        <long-description/>
        <tag line="11" name="package" description="Aura.Sql"/>
      </docblock>
    </class>
  </file>
  <file path="Aura/Sql/Exception.php" hash="18dbb2fab60dee30ce9024b060e38ec7" package="Default">
    <class final="false" abstract="false" line="18" namespace="Aura\Sql" package="Aura\Sql">
      <name>Exception</name>
      <extends>\Exception</extends>
      <full_name>\Aura\Sql\Exception</full_name>
      <docblock>
        <description>Base Exception class for Aura Sql</description>
        <long-description/>
        <tag line="11" name="package" description="Aura.Sql"/>
      </docblock>
    </class>
  </file>
  <file path="Aura/Sql/Profiler.php" hash="d390891ab5f6871a614be7616e61df99" package="Default">
    <parse_markers>
      <notice line="100">Name of argument $text does not match with function Docblock</notice>
      <notice line="100">Argument $data is missing from the function Docblock</notice>
    </parse_markers>
    <namespace-alias name="PDOStatement">PDOStatement</namespace-alias>
    <class final="false" abstract="false" line="19" namespace="Aura\Sql" package="Aura\Sql">
      <name>Profiler</name>
      <extends/>
      <full_name>\Aura\Sql\Profiler</full_name>
      <docblock>
        <description>Retains query profiles.</description>
        <long-description/>
        <tag line="12" name="package" description="Aura.Sql"/>
      </docblock>
      <implements>\Aura\Sql\ProfilerInterface</implements>
      <property final="false" static="false" visibility="protected" line="28" package="Default">
        <name>$active</name>
        <default>false</default>
        <docblock>
          <description>Is the profiler active?</description>
          <long-description/>
          <tag line="21" name="var" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="37" package="Default">
        <name>$profiles</name>
        <default>[]</default>
        <docblock>
          <description>Retained profiles.</description>
          <long-description/>
          <tag line="30" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" line="48" package="Default">
        <name>setActive</name>
        <docblock>
          <description>Turns the profiler on and off.</description>
          <long-description/>
          <tag line="39" name="param" description="True to turn on, false to turn off." type="bool" variable="$active">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="39" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="48">
          <name>$active</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="60" package="Default">
        <name>isActive</name>
        <docblock>
          <description>Is the profiler active?</description>
          <long-description/>
          <tag line="53" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="76" package="Default">
        <name>exec</name>
        <docblock>
          <description>Executes a PDOStatment and profiles it.</description>
          <long-description/>
          <tag line="65" name="param" description="The PDOStatement to execute and profile." type="\PDOStatement" variable="$stmt">
            <type by_reference="false">\PDOStatement</type>
          </tag>
          <tag line="65" name="param" description="The data that was bound into the statement." type="array" variable="$data">
            <type by_reference="false">array</type>
          </tag>
          <tag line="65" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="76">
          <name>$stmt</name>
          <default/>
          <type>PDOStatement</type>
        </argument>
        <argument line="76">
          <name>$data</name>
          <default>[]</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="100" package="Default">
        <name>call</name>
        <docblock>
          <description>Calls a user function and and profile it.</description>
          <long-description/>
          <tag line="89" name="param" description="The user function to call." type="\Aura\Sql\callable" variable="$func">
            <type by_reference="false">\Aura\Sql\callable</type>
          </tag>
          <tag line="89" name="param" description="The data that was used by the function." type="array" variable="$data">
            <type by_reference="false">array</type>
          </tag>
          <tag line="89" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="100">
          <name>$func</name>
          <default/>
          <type/>
        </argument>
        <argument line="100">
          <name>$text</name>
          <default/>
          <type/>
        </argument>
        <argument line="100">
          <name>$data</name>
          <default>[]</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="126" package="Default">
        <name>addProfile</name>
        <docblock>
          <description>Adds a profile to the profiler.</description>
          <long-description/>
          <tag line="113" name="param" description="The text (typically an SQL query) being profiled." type="string" variable="$text">
            <type by_reference="false">string</type>
          </tag>
          <tag line="113" name="param" description="The elapsed time in seconds." type="float" variable="$time">
            <type by_reference="false">float</type>
          </tag>
          <tag line="113" name="param" description="The data that was used." type="array" variable="$data">
            <type by_reference="false">array</type>
          </tag>
          <tag line="113" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="126">
          <name>$text</name>
          <default/>
          <type/>
        </argument>
        <argument line="126">
          <name>$time</name>
          <default/>
          <type/>
        </argument>
        <argument line="126">
          <name>$data</name>
          <default>[]</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="143" package="Default">
        <name>getProfiles</name>
        <docblock>
          <description>Returns all the profiles.</description>
          <long-description/>
          <tag line="136" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="Aura/Sql/ProfilerInterface.php" hash="e19cb16dc6f6a4761be1af5d378e302a" package="Default">
    <parse_markers>
      <notice line="65">Name of argument $text does not match with function Docblock</notice>
      <notice line="65">Argument $data is missing from the function Docblock</notice>
    </parse_markers>
    <namespace-alias name="PDOStatement">PDOStatement</namespace-alias>
    <interface namespace="Aura\Sql" line="19" package="Aura\Sql">
      <name>ProfilerInterface</name>
      <extends/>
      <full_name>\Aura\Sql\ProfilerInterface</full_name>
      <docblock>
        <description>Interface for query profilers.</description>
        <long-description/>
        <tag line="12" name="package" description="Aura.Sql"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" line="30" package="Default">
        <name>setActive</name>
        <docblock>
          <description>Turns the profiler on and off.</description>
          <long-description/>
          <tag line="21" name="param" description="True to turn on, false to turn off." type="bool" variable="$active">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="21" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="30">
          <name>$active</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="39" package="Default">
        <name>isActive</name>
        <docblock>
          <description>Is the profiler active?</description>
          <long-description/>
          <tag line="32" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="52" package="Default">
        <name>exec</name>
        <docblock>
          <description>Executes a PDOStatment and profiles it.</description>
          <long-description/>
          <tag line="41" name="param" description="The PDOStatement to execute and profile." type="\PDOStatement" variable="$stmt">
            <type by_reference="false">\PDOStatement</type>
          </tag>
          <tag line="41" name="param" description="The data that was bound into the statement." type="array" variable="$data">
            <type by_reference="false">array</type>
          </tag>
          <tag line="41" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="52">
          <name>$stmt</name>
          <default/>
          <type>PDOStatement</type>
        </argument>
        <argument line="52">
          <name>$data</name>
          <default>[]</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="65" package="Default">
        <name>call</name>
        <docblock>
          <description>Calls a user function and and profile it.</description>
          <long-description/>
          <tag line="54" name="param" description="The user function to call." type="\Aura\Sql\callable" variable="$func">
            <type by_reference="false">\Aura\Sql\callable</type>
          </tag>
          <tag line="54" name="param" description="The data that was used by the function." type="array" variable="$data">
            <type by_reference="false">array</type>
          </tag>
          <tag line="54" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="65">
          <name>$func</name>
          <default/>
          <type/>
        </argument>
        <argument line="65">
          <name>$text</name>
          <default/>
          <type/>
        </argument>
        <argument line="65">
          <name>$data</name>
          <default>[]</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="80" package="Default">
        <name>addProfile</name>
        <docblock>
          <description>Adds a profile to the profiler.</description>
          <long-description/>
          <tag line="67" name="param" description="The text (typically an SQL query) being profiled." type="string" variable="$text">
            <type by_reference="false">string</type>
          </tag>
          <tag line="67" name="param" description="The elapsed time in seconds." type="float" variable="$time">
            <type by_reference="false">float</type>
          </tag>
          <tag line="67" name="param" description="The data that was used." type="array" variable="$data">
            <type by_reference="false">array</type>
          </tag>
          <tag line="67" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="80">
          <name>$text</name>
          <default/>
          <type/>
        </argument>
        <argument line="80">
          <name>$time</name>
          <default/>
          <type/>
        </argument>
        <argument line="80">
          <name>$data</name>
          <default>[]</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="89" package="Default">
        <name>getProfiles</name>
        <docblock>
          <description>Returns all the profiles.</description>
          <long-description/>
          <tag line="82" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
    </interface>
  </file>
  <package name="Aura">
    <package name="Sql"/>
  </package>
  <package name="Default"/>
  <namespace name="Aura">
    <namespace name="Sql">
      <namespace name="Adapter"/>
      <namespace name="Exception"/>
    </namespace>
  </namespace>
  <marker>todo</marker>
  <marker>fixme</marker>
</project>
